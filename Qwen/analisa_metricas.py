# -*- coding: utf-8 -*-
"""Analise Collab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PYztrqUfUoew16Yhx1Tmz3MA613UtTWg

Este projeto investiga a capacidade da API Qwen-Plus para resolver problemas de dedução natural, categorizados em níveis de dificuldade (fácil, médio e difícil). O sistema, implementado em Python, utiliza as bibliotecas `textwrap`, `os`, `time`, `csv`, `psutil`, `socket`, `openai` e `dotenv` para realizar requisições à API, coletar métricas de desempenho e salvar os resultados em arquivos `.txt` e `.csv`.  Posteriormente, as métricas serão analisadas utilizando as bibliotecas `matplotlib`, `pandas` e `seaborn`.


## Metodologia

1. **Conjunto de Dados:**  Um conjunto de problemas de dedução natural foi cuidadosamente elaborado e dividido em três categorias de dificuldade: fácil, médio e difícil.  A complexidade dos problemas é definida com base no número de premissas, na complexidade das regras de inferência necessárias e na quantidade de passos de dedução requeridos para se chegar à conclusão.


2. **API Qwen-Plus:** A API Qwen-Plus foi utilizada para processar os problemas.  Para cada problema, a API recebe a descrição formal do problema como entrada e retorna a solução, ou um indicativo de impossibilidade de solução, juntamente com informações de tempo de processamento e uso de recursos.  A biblioteca `openai` facilita a interação com a API, enquanto `dotenv` garante a segurança das credenciais de acesso.


3. **Coleta de Métricas:** Durante a execução, o sistema coleta as seguintes métricas para cada problema:

    * **Tempo de execução:** Tempo decorrido desde o envio da requisição até o recebimento da resposta da API, registrado utilizando a biblioteca `time`.
    * **Uso de memória:** Quantidade de memória utilizada pelo processo durante a execução, obtida por meio da biblioteca `psutil`.
    * **Uso de CPU:** Porcentagem de uso da CPU durante a execução, obtida através da biblioteca `psutil`.
    * **Endereço IP:** Endereço IP da máquina que realizou a requisição.
    * **Nome do host:** Nome do host da máquina que realizou a requisição.
    * **Status da requisição:** Indicativo se a resposta da API corresponde a uma solução correta, incorreta ou se o modelo não conseguiu gerar uma solução válida para o problema.


4. **Armazenamento de Dados:**  As métricas coletadas são armazenadas em dois formatos:

    * **Arquivo .txt:**  Um arquivo de texto contendo um resumo das métricas para cada problema, incluindo a categoria de dificuldade e a solução gerada.
    * **Arquivo .csv:** Um arquivo CSV para facilitar a análise de dados utilizando as bibliotecas de visualização e manipulação de dados.

5. **Análise de Dados:** As métricas armazenadas em arquivos CSV serão analisadas com o auxílio das bibliotecas `pandas`, `matplotlib` e `seaborn` para gerar gráficos e tabelas, permitindo a avaliação do desempenho da API Qwen-Plus em relação ao nível de dificuldade dos problemas, bem como a comparação do consumo de recursos.


## Resultados Esperados

Espera-se que os resultados revelem uma correlação entre a dificuldade dos problemas e o tempo de execução, o consumo de memória e de CPU.  A análise dos dados ajudará a determinar se o modelo tem maior precisão para problemas mais simples e quais fatores influenciam o tempo de resposta e o consumo de recursos.  Este projeto contribuirá para a compreensão da capacidade da API Qwen-Plus para resolver problemas de lógica e suas limitações.
## Metodologia

1. **Conjunto de Dados:**  Um conjunto de problemas de dedução natural foi cuidadosamente elaborado e dividido em três categorias de dificuldade: fácil, médio e difícil.  A complexidade dos problemas é definida com base no número de premissas, na complexidade das regras de inferência necessárias e na quantidade de passos de dedução requeridos para se chegar à conclusão.


2. **API Qwen-Plus:** A API Qwen-Plus foi utilizada para processar os problemas.  Para cada problema, a API recebe a descrição formal do problema como entrada e retorna a solução, ou um indicativo de impossibilidade de solução, juntamente com informações de tempo de processamento e uso de recursos.  A biblioteca `openai` facilita a interação com a API, enquanto `dotenv` garante a segurança das credenciais de acesso.


3. **Coleta de Métricas:** Durante a execução, o sistema coleta as seguintes métricas para cada problema:

    * **Tempo de execução:** Tempo decorrido desde o envio da requisição até o recebimento da resposta da API, registrado utilizando a biblioteca `time`.
    * **Uso de memória:** Quantidade de memória utilizada pelo processo durante a execução, obtida por meio da biblioteca `psutil`.
    * **Uso de CPU:** Porcentagem de uso da CPU durante a execução, obtida através da biblioteca `psutil`.
    * **Endereço IP:** Endereço IP da máquina que realizou a requisição.
    * **Nome do host:** Nome do host da máquina que realizou a requisição.
    * **Status da requisição:** Indicativo se a resposta da API corresponde a uma solução correta, incorreta ou se o modelo não conseguiu gerar uma solução válida para o problema.


4. **Armazenamento de Dados:**  As métricas coletadas são armazenadas em dois formatos:

    * **Arquivo .txt:**  Um arquivo de texto contendo um resumo das métricas para cada problema, incluindo a categoria de dificuldade e a solução gerada.
    * **Arquivo .csv:** Um arquivo CSV para facilitar a análise de dados utilizando as bibliotecas de visualização e manipulação de dados.

5. **Análise de Dados:** As métricas armazenadas em arquivos CSV serão analisadas com o auxílio das bibliotecas `pandas`, `matplotlib` e `seaborn` para gerar gráficos e tabelas, permitindo a avaliação do desempenho da API Qwen-Plus em relação ao nível de dificuldade dos problemas, bem como a comparação do consumo de recursos.


## Resultados Esperados

Espera-se que os resultados revelem uma correlação entre a dificuldade dos problemas e o tempo de execução, o consumo de memória e de CPU.  A análise dos dados ajudará a determinar se o modelo tem maior precisão para problemas mais simples e quais fatores influenciam o tempo de resposta e o consumo de recursos.  Este projeto contribuirá para a compreensão da capacidade da API Qwen-Plus para resolver problemas de lógica e suas limitações.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


file_path = "metrics.csv"
data = pd.read_csv(file_path)

# Passo 2: Explorar os dados
print("Primeiras linhas do dataset:")
print(data.head())

print("\nResumo das colunas:")
print(data.info())

print("\nEstatísticas descritivas:")
print(data.describe())



relevant_columns = [
    "Response Time",
    "Tokens Used",
    "CPU Usage (%)",
    "Memory Usage (MB)",
    "Network Latency (ms)",
    "Server Processing Time (ms)"
]


filtered_data = data[relevant_columns]


sns.set(style="whitegrid")


fig, axes = plt.subplots(2, 3, figsize=(18, 12))
axes = axes.flatten()


for i, column in enumerate(relevant_columns):
    sns.histplot(filtered_data[column], kde=True, ax=axes[i], color="skyblue")
    axes[i].set_title(f"Distribuição de {column}")
    axes[i].set_xlabel(column)
    axes[i].set_ylabel("Frequência")


plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 8))
correlation_matrix = filtered_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Matriz de Correlação entre Métricas")
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x="Tokens Used", y="Response Time", data=filtered_data, color="orange")
plt.title("Relação entre Tokens Utilizados e Tempo de Resposta")
plt.xlabel("Tokens Utilizados")
plt.ylabel("Tempo de Resposta (s)")
plt.show()
